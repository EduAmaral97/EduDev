#include 'protheus.ch'
#INCLUDE "TOPCONN.CH"

/*
TESTE NA FAMILIA MATEMP = 3076430    

	SELECT A.BA1_FILIAL,A.BA1_CODINT,A.BA1_CODEMP,A.BA1_MATRIC,A.BA1_TIPUSU,A.BA1_TIPREG,A.BA1_DIGITO,A.BA1_NOMUSR, A.BA1_MATVID
	FROM BA1010 A
	LEFT JOIN BTS010 B ON B.D_E_L_E_T_ = '' AND B.BTS_CPFUSR = A.BA1_CPFUSR AND B.BTS_NOMUSR = A.BA1_NOMUSR 
	WHERE 1=1 AND A.D_E_L_E_T_ = '' 
	AND B.BTS_MATVID IS NULL
	AND A.BA1_CODEMP IN ('0004','0005') 
	AND A.BA1_SUBCON = '000000001' 
	AND A.BA1_MATEMP = '3644946' 

	SELECT A.BA1_FILIAL,A.BA1_CODINT,A.BA1_CODEMP,A.BA1_MATRIC,A.BA1_TIPUSU,A.BA1_TIPREG,A.BA1_DIGITO,A.BA1_NOMUSR, A.BA1_MATVID, B.BTS_NOMUSR, B.BTS_CPFUSR
	FROM BA1010 A
	LEFT JOIN BTS010 B ON B.D_E_L_E_T_ = '' AND A.BA1_MATVID = B.BTS_MATVID
	WHERE 1=1 AND A.D_E_L_E_T_ = '' 
	AND B.BTS_NOMUSR = A.BA1_NOMUSR
	AND A.BA1_CODEMP IN ('0004','0005') 
	
	SELECT COUNT(CONCAT(A.BA1_FILIAL,A.BA1_CODINT,A.BA1_CODEMP,A.BA1_MATRIC,A.BA1_TIPUSU,A.BA1_TIPREG,A.BA1_DIGITO,A.BA1_NOMUSR)) AS QTD
	FROM BA1010 A
	LEFT JOIN BTS010 B ON B.D_E_L_E_T_ = '' AND B.BTS_CPFUSR = A.BA1_CPFUSR AND B.BTS_NOMUSR = A.BA1_NOMUSR 
	WHERE 1=1 AND A.D_E_L_E_T_ = '' 
	AND B.BTS_MATVID IS NULL
	AND A.BA1_CODEMP IN ('0004','0005') 
	AND A.BA1_SUBCON = '000000001' 
	AND A.BA1_MATEMP = '3644946'


*/

user function benematvid()

Local cQuery  
local _cAlias	  := GetNextAlias()
local cProxMatvid := ''


	cQuery := "SELECT A.BA1_FILIAL,A.BA1_CODINT,A.BA1_CODEMP,A.BA1_MATRIC,A.BA1_TIPUSU,A.BA1_TIPREG,A.BA1_DIGITO,A.BA1_NOMUSR "
	cQuery +=  "FROM BA1010 A "
	cQuery +=  "LEFT JOIN BTS010 B ON B.D_E_L_E_T_ = '' AND B.BTS_CPFUSR = A.BA1_CPFUSR AND B.BTS_NOMUSR = A.BA1_NOMUSR "
	cQuery +=  "WHERE 1=1 AND A.D_E_L_E_T_ = '' "
	cQuery +=  "AND B.BTS_MATVID IS NULL "
	cQuery +=  "AND A.BA1_CODEMP IN ('0003','0006') "
	cQuery +=  "AND A.BA1_SUBCON = '000000001' "


TCQUERY cQuery NEW ALIAS (_cAlias)
DbSelectArea(_cAlias)


//PERCORRER
While (_cAlias)->(!Eof())

	cProxMatvid := BTS->(GetSx8Num("BTS","BTS_MATVID"))

	//RECLOCK
    DbSelectArea('BA1')
    BA1->(DbSetOrder(23))


    //Se conseguir posicionar no beneficiario
    If BA1->(DbSeek((_cAlias)->BA1_FILIAL+(_cAlias)->BA1_CODINT+(_cAlias)->BA1_CODEMP+(_cAlias)->BA1_MATRIC+(_cAlias)->BA1_TIPUSU+(_cAlias)->BA1_TIPREG+(_cAlias)->BA1_DIGITO+(_cAlias)->BA1_NOMUSR))

		//CRIA NOVA MATRICULA VIDA
		RecLock("BTS", .T.)
				BTS->BTS_FILIAL := FWxFilial('BTS')
				BTS->BTS_MATVID := cProxMatvid
				BTS->BTS_NOMUSR := BA1->BA1_NOMUSR
				BTS->BTS_NOMCAR := SUBSTR(BA1->BA1_NOMUSR,1,30)
				BTS->BTS_DATNAS := BA1->BA1_DATNAS
				BTS->BTS_SEXO   := BA1->BA1_SEXO
				BTS->BTS_ESTCIV := BA1->BA1_ESTCIV
				BTS->BTS_CPFUSR := BA1->BA1_CPFUSR
				BTS->BTS_DRGUSR := BA1->BA1_DRGUSR
				BTS->BTS_ORGEM  := BA1->BA1_ORGEM
				BTS->BTS_CEPUSR := BA1->BA1_CEPUSR
				BTS->BTS_ENDERE := BA1->BA1_ENDERE
				BTS->BTS_NR_END := BA1->BA1_NR_END
				BTS->BTS_COMEND := BA1->BA1_COMEND
				BTS->BTS_BAIRRO := BA1->BA1_BAIRRO
				BTS->BTS_CODMUN := BA1->BA1_CODMUN
				BTS->BTS_MUNICI := BA1->BA1_MUNICI
				BTS->BTS_ESTADO := BA1->BA1_ESTADO
				BTS->BTS_INTERD := '0'
				BTS->BTS_INSALU := '0'
				BTS->BTS_EMAIL  := BA1->BA1_EMAIL
				BTS->BTS_MAE    := BA1->BA1_MAE
				If LEN(BA1->BA1_CPFUSR) = 11
					BTS->BTS_TIPPES := 'F'
				else
					BTS->BTS_TIPPES := 'J'
				EndIF
		BTS->(MsUnlock())
		ConfirmSX8()

		//RECLOCK ATUALIZA A MATVID NO BENEFICIARIO
		RecLock('BA1', .F.)
			BA1->BA1_MATVID := cProxMatvid
		BA1->(MsUnlock())

	EndIf

	(_cAlias)->(dBskip())
EndDo

(_cAlias)->(DbCloseArea())
return






